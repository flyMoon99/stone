generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          String      @id @default(cuid())
  account     String      @unique @db.VarChar(50)
  password    String      @db.VarChar(255)
  type        AdminType   @default(ADMIN)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  status      UserStatus  @default(ACTIVE)
  lastLoginAt DateTime?   @map("last_login_at")
  admin_roles AdminRole[]

  @@map("admins")
}

model Member {
  id          String     @id @default(cuid())
  account     String     @unique @db.VarChar(50)
  password    String     @db.VarChar(255)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  status      UserStatus @default(ACTIVE)
  lastLoginAt DateTime?  @map("last_login_at")

  @@map("members")
}

model Role {
  id               String           @id @default(cuid())
  name             String           @db.VarChar(50)
  code             String           @unique @db.VarChar(50)
  description      String?          @db.VarChar(255)
  status           Boolean          @default(true)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  admin_roles      AdminRole[]
  role_permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id                String           @id @default(cuid())
  key               String           @unique @db.VarChar(100)
  name              String           @db.VarChar(100)
  type              PermissionType
  parentId          String?
  path              String?          @db.VarChar(200)
  method            String?          @db.VarChar(10)
  order             Int              @default(0)
  enabled           Boolean          @default(true)
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  permissions       Permission?      @relation("permissionsTopermissions", fields: [parentId], references: [id])
  other_permissions Permission[]     @relation("permissionsTopermissions")
  role_permissions  RolePermission[]

  @@map("permissions")
}

model AdminRole {
  adminId String
  roleId  String
  admins  Admin  @relation(fields: [adminId], references: [id])
  roles   Role   @relation(fields: [roleId], references: [id])

  @@id([adminId, roleId])
  @@map("admin_roles")
}

model RolePermission {
  roleId       String
  permissionId String
  permissions  Permission @relation(fields: [permissionId], references: [id])
  roles        Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model SystemLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  userType  String?  @map("user_type")
  action    String   @db.VarChar(100)
  resource  String?  @db.VarChar(100)
  details   Json?
  ip        String?  @db.VarChar(45)
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("system_logs")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum AdminType {
  SUPER_ADMIN
  ADMIN
}

enum PermissionType {
  MENU
  PAGE
  API
  ACTION
}
